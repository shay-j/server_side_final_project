#!/usr/bin/env node

'use strict';

require('dotenv').config();
const app = require('../app');
const debug = require('debug')('server-side-final-project:server');
const http = require('http');
const { connect } = require('../src/db');         // <-- NOTE the ./src/ prefix
const { logger } = require('../src/logger');      // optional: to log start

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Connect to DB, then start listening.
 */
connect(process.env.MONGODB_URI)
    .then(() => {
      server.listen(port, onListening);
      server.on('error', onError);
    })
    .catch((err) => {
      console.error('Failed to connect to MongoDB:', err);
      process.exit(1);
    });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const portNum = parseInt(val, 10);
  if (Number.isNaN(portNum)) return val; // named pipe
  if (portNum >= 0) return portNum;     // port number
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  if (logger) logger.info({ bind }, 'server started');
}
